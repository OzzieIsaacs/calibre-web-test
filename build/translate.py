# #!/usr/bin/env python
# # -*- coding: utf-8 -*-

import subprocess
import sys
import glob, os
import json
from config import FILEPATH, WIKIPATH
import msgpack
import babel.messages.pofile as pofile
from babel import Locale as LC

decoders = (
    None,
    lambda x, fj: set(x),
)

def msgpack_decoder(code, data):
    return decoders[code](msgpack_loads(data), False)

def msgpack_loads(dump):
    return msgpack.unpackb(dump, ext_hook=msgpack_decoder, raw=False)

need_iso = msgpack_loads(open('iso639.calibre_msgpack', 'rb').read())

workdir = os.getcwd()
os.chdir(FILEPATH)

# Extract all messages from the source code and create a template file
p = subprocess.Popen("pybabel extract --no-wrap -F babel.cfg -o messages.pot cps"
                     ,shell=True,stdout=subprocess.PIPE, stdin=subprocess.PIPE)
p.wait()

# update all translation files with the new content of the template file
# adding --ignore-obsolete will delete all obsolete translations
pot_path = os.path.join(FILEPATH,"messages.pot")
translation_path = os.path.join(FILEPATH,'cps','translations')
if sys.version_info < (3, 0):
    translation_path = translation_path.encode(sys.getfilesystemencoding())
p = subprocess.Popen("pybabel update --no-wrap -i "+ pot_path + " -d " + translation_path,
                     shell=True, stdout=subprocess.PIPE, stdin=subprocess.PIPE)
p.wait()

# Include calibre iso639 translations of language names
out_iso = dict()
os.chdir(workdir)
translation_list = list()

lang_keys = need_iso['name_map'].keys()


for file in glob.glob1("./translations", "*.po"):
    langcode=file[23:-3]
    # Remove old content from po file
    message_path = os.path.join(FILEPATH,'cps','translations',langcode, 'LC_MESSAGES','messages.po')
    translateFile=open(message_path)
    mergedTranslation=pofile.read_po(translateFile,locale=langcode)
    translateFile.close()
    target_path = os.path.join(FILEPATH , "cps","translations" , langcode , "LC_MESSAGES","messages.po")
    targetFile = open(target_path,'wb')
    pofile.write_po(targetFile, mergedTranslation, ignore_obsolete=True, width=0)
    targetFile.close()

    # transfer calibre language translation to
    count = 0
    for msg in mergedTranslation:
        if msg.string != '' and msg.id != "":
            count += 1
    allMsg = len(mergedTranslation._messages)
    for x in mergedTranslation.check():
        print(x)
    languageFile=open("./translations/" + file)
    LanguageTranslation=pofile.read_po(languageFile)
    languageFile.close()
    lang_name = LC.parse(langcode).get_language_name('en')
    translation_list.append("| {} | {} of strings {} translated |".format(lang_name, count, allMsg))
    print("{} language: {} of strings {} translated".format(lang_name, count, allMsg))
    iso_translations = dict()
    for msg in LanguageTranslation:
        if msg.id:
            if msg.id.lower() == 'pushto':
                msg.id = 'Pashto'
            if msg.id.lower() in lang_keys:
                lCode = need_iso['name_map'][msg.id.lower()]
                # del need_iso['name_map'][msg.id.lower()]

            # lCode = msg.auto_comments[0][9:]
            # if lCode in need_iso['codes3t']:
                if msg.string:
                    iso_translations[lCode] = msg.string
                else:
                    iso_translations[lCode] = msg.id
    out_iso[langcode]=iso_translations

# Add English to the translation table
for msg in LanguageTranslation:
    if msg.id:
        lCode = msg.auto_comments[0][9:]
        if lCode in need_iso['codes3t']:
            iso_translations[lCode] = msg.id
out_iso['en'] = iso_translations

header = '''# -*- coding: utf-8 -*-

# This file is part of the Calibre-Web (https://github.com/janeczku/calibre-web)
#   Copyright (C) 2019 OzzieIsaacs, pwr
# Licensed under GLPv3. See the project's LICENSE file for details.

# pylint: disable=too-many-lines,bad-continuation

from __future__ import unicode_literals

# This file is autogenerated, do NOT add, change, or delete ANY string
# If you need help or assistance for adding a new language, please contact the project team  

# map iso639 language codes to language names, translated

'''

headline = '''## Translation status

The following user languages are available:

| Language  | Translations  |
| ---------- |:---------:|
'''

with open(os.path.join(FILEPATH,'cps', 'iso_language_names.py'), 'w', encoding='utf8') as f:
    f.write(header)
    f.write('LANGUAGE_NAMES = ')
    json.dump(out_iso, f, indent=4, ensure_ascii=False)

with open(os.path.join(WIKIPATH, 'Translation-Status.md'), 'w', encoding='utf8') as f:
    f.write(headline)
    f.write("\r\n".join(translation_list))

# Generate .mo files
trans_path = "cps/translations"
if sys.version_info < (3, 0):
    trans_path = trans_path.encode(sys.getfilesystemencoding())
p = subprocess.Popen("pybabel compile -d " + FILEPATH + trans_path,
                     shell=True, stdout=subprocess.PIPE, stdin=subprocess.PIPE)
p.wait()


